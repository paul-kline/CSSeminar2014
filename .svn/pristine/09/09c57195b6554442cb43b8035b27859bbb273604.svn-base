/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tetris3;

import NeuralThings.PaulNetworkFactory;
import TetrisHelpful.BoardConverter;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import net.percederberg.tetris.Figure;
import net.percederberg.tetris.SquareBoard;
import org.encog.neural.networks.BasicNetwork;
import tetris3.PlacementDecider;
import tetrispaul4.ControllerObject;

/**
 *
 * @author Paul
 */
public class PersonalizedPlacementDecider extends PlacementDecider {

    private boolean useNN;
    private boolean useWeights;
    private boolean CareIfHoleIsMadeByPlacement;
    private boolean CareIfTopIsnotFrequent;
    private PaulNetworkFactory.NNCodes myNNCode;
    private float myPercentHigherReq=Float.NaN;
    public static final int WEIGHTCOUNT = 8;

    public PersonalizedPlacementDecider(byte[][] boardp, ByteFig fig1p, ByteFig fig2p, int[] weightsp,
            boolean usenn, boolean carehole, boolean carediff,float percentHigherReq, PaulNetworkFactory.NNCodes nnc) {
        super(boardp, fig1p, fig2p, weightsp);
        useNN = usenn;
        CareIfHoleIsMadeByPlacement = carehole;
        CareIfTopIsnotFrequent = carediff;
        myNNCode = nnc;
        useWeights = (weightsp != null);
        myPercentHigherReq=percentHigherReq;
    }

    public PersonalizedPlacementDecider(SquareBoard board, Figure figure, ControllerObject co) {
        this((new BoardConverter()).ConvertToByte_specializeCurrentFigure(board, figure, 0), new ByteFig(figure), null, co.getWeights(),
                co.getUseNN(), co.isCareIfHoleIsMadeByPlacement(), co.isCareIfTopIsnotFrequent(),co.getmyPercentHigherRequirement(), co.getNNCode());
    }

    @Override
    public boolean shouldAskForHelp() {
        if (!useWeights) {
            SetTopXChoicesToEVERYTHING();
            return true;
        }
        if (!IstopChoicesSet) {
            SetTopXChoices(5);
        }
        
        if (myPercentHigherReq!=Float.NaN) {
            if (TopChoices.get(1)!=null &&
                    (double)(TopChoices.get(0).getStaticvalue()-(double)TopChoices.get(1).getStaticvalue())/
                    (double)TopChoices.get(0).getStaticvalue()>=myPercentHigherReq/100.0){
                //myCO.getMyGame().handlePause();
                //JOptionPane.showMessageDialog(null, "I ignored!!!!! Are you proud?");
                        return false;
            }
        }
        
        if (CareIfTopIsnotFrequent) {
            BoardConverter bc = new BoardConverter();
            int[] CountOfOccurances = new int[TopChoices.size()];
            for (int i = 0; i < CountOfOccurances.length; i++) {
                for (int j = 0; j < CountOfOccurances.length; j++) {
                    if (i == j) {
                        //  continue;
                    }
                    if (bc.AreEquivelent(TopChoices.get(i).getMyboardAfterPlacementBeforeLinesClearedBeforeAllOnes(),
                            TopChoices.get(j).getMyboardAfterPlacementBeforeLinesClearedBeforeAllOnes())) {
                        CountOfOccurances[i]++;
                    }
                }
            }
            countOfOccur = CountOfOccurances;
            // System.out.println("First choice shows up: " + CountOfOccurances[0]);

            for (int i = 1; i < CountOfOccurances.length; i++) {
                if (CountOfOccurances[0] <= CountOfOccurances[i]) {

                    //if the board is the same as the first, ignore that they have the same count.
                    if (bc.AreEquivelent(TopChoices.get(0).getMyboardAfterPlacementBeforeLinesClearedBeforeAllOnes(),
                            TopChoices.get(i).getMyboardAfterPlacementBeforeLinesClearedBeforeAllOnes())) {
                        continue;
                    }
                    return true;
                }
            }
        }

        if (CareIfHoleIsMadeByPlacement && HoleIsMade()) {
            return true;
        }

        return false;

    }

    protected BasicNetwork CreateNeuralNet() {
        
        return new PaulNetworkFactory().AssembleNetwork(myNNCode);
    }

    public Cenario NNChooseBest() {
        // FlatNetwork x = NeuralNetwork.createNetwork();
        BasicNetwork x = CreateNeuralNet();

        BoardConverter bc = new BoardConverter();
        double[] NNRatings = new double[TopChoices.size()];

        for (int i = 0; i < TopChoices.size(); i++) {

            // double[] input = bc.ConvertBoardToInputForNet(board, 10, 10);
            double[] input = GetAppropriateInputs(i, myNNCode);//cen.Getvalues();
            double[] output = new double[1];
            x.compute(input, output);
            NNRatings[i] = output[0];
            //  System.out.println("output is of size: " + output.length);
            //     System.out.println("here is my output for the top choice" + i+": " + output[0]);
        }
        int hIndex = -1;
        double hValue = -1.0;
        for (int i = 0; i < NNRatings.length; i++) {
            if (NNRatings[i] > hValue) {
                hValue = NNRatings[i];
                hIndex = i;
            }

        }
        hIndex = (hIndex < 0) ? 0 : hIndex;
        return TopChoices.get(hIndex);

    }

    private void SetTopXChoicesToEVERYTHING() {
        TopChoices = new LinkedList<Cenario>();
        //Integer

        fig.rotateToOrientation(1);
        int cenariosPresent = 0;
        nextfig.rotateToOrientation(1);
        weights = new int[WEIGHTCOUNT];
        for (int i = 0; i < weights.length; i++) {
            weights[i] = 0;

        }

        //nextfig.rotateToOrientation(1);
        for (int a = 1; a <= fig.getMaxOrientation(); a++) {
            fig.rotateToOrientation(a);
            for (int b = 1; b <= nextfig.getMaxOrientation(); b++) {
                nextfig.rotateToOrientation(b);
                if (sout) {
                    System.out.println("piece b is this wide I think: " + nextfig.getpiecewidth());
                }
                for (int i = 0; i <= board[0].length - fig.getpiecewidth(); i++) {
                    for (int j = 0; j <= board[0].length - nextfig.getpiecewidth(); j++) {
                        cenario = new Cenario(board, fig, i, nextfig, j, weights);// w1, w2, w3, w4, w5, w6, w7, w8);                        
                        TopChoices.add(cenario);
                    }
                }
            }
        }

        IstopChoicesSet = true;

    }
}
