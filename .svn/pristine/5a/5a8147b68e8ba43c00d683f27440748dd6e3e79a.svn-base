/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIs;

import TetrisFactory.TetrisFactory;
import TetrisHelpful.TetrisReader;
import TetrisHelpful.TetrisWriter;
import bytefigtestering.AIPlayer;
import bytefigtestering.GAControllerObject;
import bytefigtestering.PaulGame1;
import java.awt.Color;
import java.io.File;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author paul.kline
 */
public class Progress extends javax.swing.JFrame {

    private GAControllerObject myGACO;
    private int total = 0;
    private int completed = 0;

    private String ScoreOutputFileName = "";
    private String PlayByPlayOutputFileName = "";
    private String PlayByPlayPATH = "";
    private String ScoreOutputPATH = "";
    private File ScoreFile;
    private File PlayByPlayFile;
    private LinkedList<PaulGame1> TopGames= new LinkedList<PaulGame1>();   
    private final TetrisWriter tw= new TetrisWriter();;
    private int ShowTopGamesNum=5;
    private String[] TopGamesStrArray;
    private Thread t;

    public int getTotal() {
        return total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    public int getCompleted() {
        return completed;
    }

    public void setCompleted(int completed) {
        this.completed = completed;
    }

    public synchronized void incrementCompleted() {
        completed++;
    }

    public JTextArea getTxtaOutput() {
        return txtaOutput;
    }

    public void setTxtaOutput(JTextArea txtaOutput) {
        this.txtaOutput = txtaOutput;
    }

    /**
     * Creates new form Progress
     */
    public Progress() {
        man();
        initComponents();
        setTitle("Tetris GA --By Paul Kline");
        SetupOutputFiles();
        PaulGame1 dummy= new PaulGame1(-1);
            TopGames.add(dummy);
    }

    ;

    public void SetupOutputFiles() {
        String timestamp = tw.GetTimeStamp(true, true, true, true, true, true);
        PlayByPlayOutputFileName = "PlayByPlay_" + timestamp + ".txt";
        ScoreOutputFileName = "Scores_" + timestamp + ".txt";
        String newLoc = ".\\Resources\\GAOutputs\\"+tw.GetTimeStamp(true, true, true, false, false, false)+ "\\";
        ScoreFile=new File(newLoc+ScoreOutputFileName);
        PlayByPlayFile= new File(newLoc+PlayByPlayOutputFileName);
        
        if (chkbSavePlayByPlayExternal.isSelected()) {
            CreateIfNeeded(PlayByPlayFile);
        }
        if (chkbSaveScoresExternal.isSelected()) {
            CreateIfNeeded(ScoreFile);
        }
//        System.out.println("initcomponents completed");
    }

    public Progress(GAControllerObject myGACO) {
        this();
        setMyGACO(myGACO);

        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaOutput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAScores = new javax.swing.JTextArea();
        lvlPlaybyPlay = new javax.swing.JLabel();
        lblScores = new javax.swing.JLabel();
        chkbSavePlayByPlayExternal = new javax.swing.JCheckBox();
        chkbSaveScoresExternal = new javax.swing.JCheckBox();
        btnEditPlaybyPlayExternalLocation = new javax.swing.JButton();
        btnEditScoreExternalLoc = new javax.swing.JButton();
        lblTopGames = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstTopGames = new javax.swing.JList();
        btnPause = new javax.swing.JToggleButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jProgressBar1.setString("Progress");
        jProgressBar1.setStringPainted(true);
        jProgressBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jProgressBar1MouseClicked(evt);
            }
        });

        jLabel1.setText("Working...");

        txtaOutput.setColumns(20);
        txtaOutput.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 13)); // NOI18N
        txtaOutput.setRows(5);
        txtaOutput.setText("Output Here");
        txtaOutput.setEnabled(false);
        jScrollPane1.setViewportView(txtaOutput);

        txtAScores.setColumns(20);
        txtAScores.setRows(5);
        jScrollPane2.setViewportView(txtAScores);

        lvlPlaybyPlay.setText("Play-by-play");

        lblScores.setText("Scores");

        chkbSavePlayByPlayExternal.setText("Save External");
        chkbSavePlayByPlayExternal.setEnabled(false);

        chkbSaveScoresExternal.setSelected(true);
        chkbSaveScoresExternal.setText("Save External");
        chkbSaveScoresExternal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbSaveScoresExternalActionPerformed(evt);
            }
        });

        btnEditPlaybyPlayExternalLocation.setText("Edit Location");
        btnEditPlaybyPlayExternalLocation.setEnabled(false);

        btnEditScoreExternalLoc.setText("Edit Location");
        btnEditScoreExternalLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditScoreExternalLocActionPerformed(evt);
            }
        });

        lblTopGames.setText("Top Games");

        lstTopGames.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(lstTopGames);

        btnPause.setSelected(true);
        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPause, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 445, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lvlPlaybyPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkbSavePlayByPlayExternal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditPlaybyPlayExternalLocation))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblScores)
                        .addGap(68, 68, 68)
                        .addComponent(chkbSaveScoresExternal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditScoreExternalLoc))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTopGames)
                        .addContainerGap())
                    .addComponent(jScrollPane5)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lvlPlaybyPlay)
                                .addComponent(lblScores)
                                .addComponent(chkbSavePlayByPlayExternal)
                                .addComponent(chkbSaveScoresExternal)
                                .addComponent(btnEditPlaybyPlayExternalLocation)
                                .addComponent(btnEditScoreExternalLoc))
                            .addComponent(lblTopGames, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPause, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public JTextArea getTxtAScores() {
        return txtAScores;
    }

    public void setTxtAScores(JTextArea txtAScores) {
        this.txtAScores = txtAScores;
    }

    private void jProgressBar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProgressBar1MouseClicked

    }//GEN-LAST:event_jProgressBar1MouseClicked

    private void btnEditScoreExternalLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditScoreExternalLocActionPerformed
        TetrisReader tr = new TetrisReader();
        File newFilePath = tr.ChooseDirectoryAtThisPath(".");
        if (null != newFilePath) {
            ScoreOutputPATH = newFilePath.getPath()+ "\\"+ ScoreOutputFileName;
        }

    }//GEN-LAST:event_btnEditScoreExternalLocActionPerformed

    private void chkbSaveScoresExternalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbSaveScoresExternalActionPerformed
        if (chkbSaveScoresExternal.isSelected()) {
            CreateIfNeeded(ScoreFile);
            tw.RewriteFileToThis(txtAScores.getText(), ScoreFile.getPath());
        }
    }//GEN-LAST:event_chkbSaveScoresExternalActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        btnPause.setText(((btnPause.isSelected())? "Pause": "Resume"));
        if (btnPause.isSelected()) {
            t.suspend();
        }else{
            t.resume();
        }
    }//GEN-LAST:event_btnPauseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void man() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            possible options
//            Metal
//            Nimbus
//            CDE/Motif
//            Windows
//            Windows Classic
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Progress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Progress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Progress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Progress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditPlaybyPlayExternalLocation;
    private javax.swing.JButton btnEditScoreExternalLoc;
    private javax.swing.JToggleButton btnPause;
    private javax.swing.JCheckBox chkbSavePlayByPlayExternal;
    private javax.swing.JCheckBox chkbSaveScoresExternal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblScores;
    private javax.swing.JLabel lblTopGames;
    private javax.swing.JList lstTopGames;
    private javax.swing.JLabel lvlPlaybyPlay;
    private javax.swing.JTextArea txtAScores;
    private javax.swing.JTextArea txtaOutput;
    // End of variables declaration//GEN-END:variables

    public void setProgressTo(int newVal) {
        jProgressBar1.setValue(newVal);
        jProgressBar1.setBackground(Color.BLACK);
        jProgressBar1.setString(completed + "/" + total);
    }

    public void setCompleted() {
        jLabel1.setText("Completed!");
//        

    }

    void CommandAIPtoDoWork() {
        if (null == myGACO.getMyAIPlayer()) {
            JOptionPane.showMessageDialog(this, "Error: myAIP is null");
            return;
        }
        myGACO.getMyAIPlayer().PlayGameUsingGaco();
    }

    public GAControllerObject getMyGACO() {
        return myGACO;
    }

    public void setMyGACO(GAControllerObject myGACO) {
        this.myGACO = myGACO;
    }

    public void NotifyGameCompleted(PaulGame1 pg1) {
        incrementCompleted();
        setProgressTo((int) (completed * 100 / total));
        SendToTopList(pg1);
        UpdateTopList();
    }

    public synchronized void UpdateScoresOutput(String details) {
        txtAScores.append(details+ "\n");
        
        if (chkbSaveScoresExternal.isSelected()) {
            tw.AppendToFile(details, ScoreFile.getPath());
        }

    }

    
    private void CreateIfNeeded(File file){
        boolean b = false;
//        System.out.println(file.getParentFile().getPath());
        if (!file.getParentFile().exists()) {
            b = file.getParentFile().mkdirs();
        }
        System.out.println("T/F : I succeeded in making all directories. ANSWER: " + b);
    }

    private void SendToTopList(PaulGame1 pg1) {
        if (TopGames.size()<ShowTopGamesNum || pg1.getScore()> TopGames.getLast().getScore()) {
            myGACO.getMyAIPlayer().PerformProperInsertion(pg1, TopGames, ShowTopGamesNum);
        }
    }

    private void UpdateTopList() {
        if (null==TopGamesStrArray) {
            TopGamesStrArray = new String[ShowTopGamesNum];
            for (int i = 0; i < TopGamesStrArray.length; i++) {
                TopGamesStrArray[i]="";               
            }
            PaulGame1 dummy= new PaulGame1(-1);
            TopGames.add(dummy);
        }
        for (int i = 0; i < TopGames.size(); i++) {
            TopGamesStrArray[i]=(i+1)+ ". "+ TopGames.get(i).soutMe();            
        }
        System.out.println("efefefefef"+ TopGamesStrArray[0]);
        lstTopGames.setListData(TopGamesStrArray);
        
    }

    void setT(Thread t) {
        this.t= t;
    }

}
