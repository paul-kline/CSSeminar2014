/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bytefigtestering;

/**
 *
 * @author Paul
 */
public class AIPlayer {
     int improvementcounter = 0;
    PaulGame[] population=null;
    public boolean sout=false;
    
    public AIPlayer(PaulGame gamep,int popsize){
        population=new PaulGame[popsize];
        
    }
     public AIPlayer(int popsize){
        population=new PaulGame[popsize];
       
    }
    
     private PaulGame returnBestgameof300Rands() {
        int best = 0;
        PaulGame[] games = new PaulGame[300];
        PaulGame bestgame = null;
        for (int i = 0; i < 300; i++) {
            int numberOfWeights= 8;
            int[] randWeights= new int[numberOfWeights];
            for (int j = 0; j < randWeights.length; j++) {
                randWeights[j]= (int) (Math.random() * 100 - 50);
                
            }
//            int rand1 = (int) (Math.random() * 100 - 50);
//            int rand2 = (int) (Math.random() * 100 - 50);
//            int rand3 = (int) (Math.random() * 100 - 50);
//            int rand4 = (int) (Math.random() * 100 - 50);
//            int rand5 = (int) (Math.random() * 100 - 50);
//            int rand6 = (int) (Math.random() * 100 - 50);
//            int rand7 = (int) (Math.random() * 100 - 50);
//            int rand8 = (int) (Math.random() * 100 - 50);

            PaulGame agame = new PaulGame(randWeights);
            agame.PlayGame();
            games[i] = agame;
            
            agame = null;
            if (games[i].score > best) {
                best = games[i].score;
                bestgame = games[i];
            }
        }
  //      System.out.print("Best score of 300: " + best);
 //      System.out.print(" " + bestgame.w1 + " " + bestgame.w2 + " " + bestgame.w3 + " " + bestgame.w4 + " " + bestgame.w5 + " " + bestgame.w6 + " " + bestgame.w7 + " " + bestgame.w8 + '\n');
        return bestgame;
    }
     
    public PaulGame change1var(PaulGame game, int which){
        int rand = 0;
         int best = 0;
        PaulGame[] games = new PaulGame[300];
        PaulGame bestgame = null;
       
        
        for (int i = 0; i < 300; i++) {
            rand=(int) (Math.random() * 100 - 50); 
            
            switch (which) {
            case 1:
                game.weights[0]=rand;
                
                break;
            case 2:
                game.weights[1]=rand;
                
                break;
            case 3:
                game.weights[2]=rand;
                
                break;
            case 4:
                game.weights[3]=rand;
                
                break;
            case 5:
                game.weights[4]=rand;
                
                break;
            case 6:
                game.weights[5]=rand;
                
                break;
            case 7:
                game.weights[6]=rand;
                
                break;
            case 8:
                game.weights[7]=rand;
                
                break;
            
            default:
                throw new AssertionError();
        }
        
            
      

            PaulGame agame = new PaulGame(game.weights);//game.w1, game.w2, game.w3, game.w4, game.w5, game.w6, game.w7, game.w8);
            agame.PlayGame();
            games[i] = agame;
            agame = null;
            System.out.println("Game: " +i);
           // games[i].soutMe();
            if (games[i].score > best) {
                best = games[i].score;
                bestgame = games[i];
            }
        }
        System.out.print("Best score of 300: " + best);
        System.out.print(" " + bestgame.weights[0] + " " + bestgame.weights[1] + " " + bestgame.weights[2] + " " + bestgame.weights[3] + " " + 
                bestgame.weights[4] + " " + bestgame.weights[5] + " " + bestgame.weights[6] + " " + bestgame.weights[7] + '\n');
        return bestgame;
    }
    private PaulGame createNextGen(PaulGame paulGame) {
        int best = 0;
        int oldbest = paulGame.score;

        PaulGame[] games = new PaulGame[300];
        PaulGame bestgame = null;

        for (int i = 0; i < 300; i++) {
            int[] randoms= new int[paulGame.weights.length];
            
            for (int j = 0; j < paulGame.weights.length; j++) {
                randoms[j]= paulGame.weights[j] + (int) (Math.random() * 11 - 5);
            }
//            int randvar1 = paulGame.w1 + (int) (Math.random() * 11 - 5);
//            int randvar2 = paulGame.w2 + (int) (Math.random() * 11 - 5);
//            int randvar3 = paulGame.w3 + (int) (Math.random() * 11 - 5);
//            int randvar4 = paulGame.w4 + (int) (Math.random() * 11 - 5);
//            int randvar5 = paulGame.w5 + (int) (Math.random() * 11 - 5);
//            int randvar6 = paulGame.w6 + (int) (Math.random() * 11 - 5);
//            int randvar7 = paulGame.w7 + (int) (Math.random() * 11 - 5);
//            int randvar8 = paulGame.w8 + (int) (Math.random() * 11 - 5);

//            int[] randoms= {randvar1, randvar2, randvar3,randvar4,randvar5,randvar6,randvar7,randvar8};
            
            PaulGame agame = new PaulGame(randoms);//randvar1, randvar2, randvar3, randvar4, randvar5, randvar6, randvar7, randvar8);
            games[i] = agame;
            agame.soutMe();
            agame = null;
            if (games[i].score > best) {
                best = games[i].score;
                bestgame = games[i];
            }
        }
        System.out.print("Best score of 300: " + best);
        System.out.print(" " + bestgame.weights[0] + " " + bestgame.weights[1] + " " + bestgame.weights[2] + " " + bestgame.weights[3] + " " + 
                bestgame.weights[4] + " " + bestgame.weights[5] + " " + bestgame.weights[6] + " " + bestgame.weights[7] + '\n');
        if (best > oldbest) {
            improvementcounter++;
            System.out.println("Improved from: " + oldbest + " to " + best);
            return bestgame;
        }
        return paulGame;
    }
    public void createAllNextGen(){
        for (int i = 0; i < population.length; i++) {
           population[i]= createNextGen(population[i]);
            if (sout) {
                System.out.print(i + " ");   population[i].soutMe();
            }
        }
    }
    
    public void buildRandPop(){
        for (int i = 0; i < population.length; i++) {
            population[i]=returnBestgameof300Rands();
            if (sout) {
                population[i].soutMe();
            }
        }
    }
}
