/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tetrispaul4;

import TemplateMethod.AbstractGame;
import TemplateMethod.AbstractGameTrainer;
import TetrisFactory.TrainFromFailSequenceTetris;
import TetrisHelpful.TetrisReader;
import TetrisHelpful.TetrisWriter;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import net.percederberg.tetris.Game;

/**
 *
 * @author paul.kline
 */
public class TrainingSetupGUI extends javax.swing.JFrame {
    private TrainFromFailSequenceTetris TetrisTrainer;

    /**
     * Creates new form TrainingSetupGUI
     */
    public TrainingSetupGUI() {
        man();
        initComponents();
        PopulateClosedAndOpenLists();

       // this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstOpenFailSequences = new javax.swing.JList();
        lblOpenFail = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstClosedFailSequences = new javax.swing.JList();
        lblClosedFailSequences = new javax.swing.JLabel();
        btnSelectSequence = new javax.swing.JButton();
        btnMoveBack = new javax.swing.JButton();
        btnRegular = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstOpenFailSequences.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstOpenFailSequences.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstOpenFailSequences.setSelectedIndex(0);
        jScrollPane1.setViewportView(lstOpenFailSequences);

        lblOpenFail.setText("Open Fail Sequences");

        lstClosedFailSequences.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstClosedFailSequences);

        lblClosedFailSequences.setText("Closed Fail Sequences");

        btnSelectSequence.setText("Select");
        btnSelectSequence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectSequenceActionPerformed(evt);
            }
        });

        btnMoveBack.setText("Un-close Selection");
        btnMoveBack.setToolTipText("Move the selected Fail Sequences back to the open sequences.");

        btnRegular.setText("Train from Regular Game!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnSelectSequence)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblOpenFail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegular)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMoveBack)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblClosedFailSequences))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblClosedFailSequences)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOpenFail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectSequence)
                    .addComponent(btnMoveBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(btnRegular)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectSequenceActionPerformed
        TetrisTrainer= new TrainFromFailSequenceTetris();
        Frame frame= new Frame("trainer");
                frame.add(TetrisTrainer.getComponent());
        frame.pack();
        
        frame.setVisible(true);
        
        System.out.println("`ouch.");
        
    }//GEN-LAST:event_btnSelectSequenceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void man() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrainingSetupGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrainingSetupGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrainingSetupGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrainingSetupGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMoveBack;
    private javax.swing.JButton btnRegular;
    private javax.swing.JButton btnSelectSequence;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClosedFailSequences;
    private javax.swing.JLabel lblOpenFail;
    private javax.swing.JList lstClosedFailSequences;
    private javax.swing.JList lstOpenFailSequences;
    // End of variables declaration//GEN-END:variables

    private void PopulateClosedAndOpenLists() {
        try {
            //will fill properly, then add them to the appropriate listboxes
            LinkedList<File> ClosedList = new LinkedList<>();
            LinkedList<File> OpenList = new LinkedList<>();

            //get all the files.
            TetrisWriter tw = new TetrisWriter();
            TetrisReader tr = new TetrisReader();
            File folder = new File(".\\Resources\\Fail Sequences\\All Fail Sequences");
            File[] listOfFiles = folder.listFiles();

            //cool, now get the file states.
            String fileStatesFileFullPathName = ".\\Resources\\Fail Sequences\\Open and Closed List\\OpenAndClosedList.txt";
            File FileStatesFile = new File(fileStatesFileFullPathName);

            //cool, now lets get the associated states with the list of files
            BufferedReader br = new BufferedReader(new FileReader(FileStatesFile));
            String line;

            //make a dictionary of whether each file name is open or closed.
            LinkedList<String[]> dic = new LinkedList<>();
            while ((line = br.readLine()) != null) {
                String[] ln = line.split(",");
                dic.add(ln);
            }
            br.close();

            //cool, now let's populate the lists
            for (File file : listOfFiles) {
                //if the file is in the dictionary, where?. returns -1 if not found.
                int foundLocation = StringIsInThisDictionaryAtLittleIndex(file.getName(), dic, 1);
                if (foundLocation > 0) {
                    //if it's open, add to open list. otherwise add to closed.
                    if (dic.get(foundLocation)[0].trim().toLowerCase().equals("o")) {
                        OpenList.add(file);
                    } else {
                        ClosedList.add(file);
                    }
                } else {
                    //if the file is not it the dictionary, it is new and should
                    //be added to the "open" list and also added to the file 
                    //to keep track of if a file is open or closed.
                    OpenList.add(file);
                    tw.AppendToFile("O, " + file.getName(), fileStatesFileFullPathName);
                }
            }
            PopulateListBox(lstOpenFailSequences, OpenList);
            PopulateListBox(lstClosedFailSequences, ClosedList);




        } catch (IOException ex) {
            Logger.getLogger(TrainingSetupGUI.class.getName()).log(Level.SEVERE, null, ex);
        }



    }

    private int StringIsInThisDictionaryAtLittleIndex(String name, LinkedList<String[]> dic, int i) {

        for (int j = 0; j < dic.size(); j++) {
            if (dic.get(j)[i].trim().equals(name.trim())) {
                return j;
            }

        }
        return -1;

    }

    private void PopulateListBox(JList jlist, LinkedList<File> OpenList) {
        String fnames[] = new String[OpenList.size()];
        for (int i = 0; i < fnames.length; i++) {
            fnames[i] = OpenList.get(i).getName().trim();
        }
        
        jlist.setListData(fnames);
    }
}
