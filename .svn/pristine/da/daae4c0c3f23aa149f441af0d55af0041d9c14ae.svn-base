/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bytefigtestering;



import TetrisHelpful.TetrisWriter;
import java.io.File;
import javax.swing.JOptionPane;
import net.percederberg.tetris.Figure;
import net.percederberg.tetris.Game;


/**
 *
 * @author Paul
 */
public class ByteFigTestering {

    /**
     *If true, this boolean will use the smarter
     * decision maker to ask the NN instead of
     * the "classic" MakeDecision()"
     */
    public final static boolean useNN=true;
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

       

        //Score: 9083268:   {-2,-11,-48,0,14,32,50,45};
        //
        //WA to try sometime {-3.20, -7.78, 44.03, 3.24, 13.16,31.70,47.43,44.95}
        String input = JOptionPane.showInputDialog(null, "'t': test | 'r': real\n"
                + "'m': mutate | 'c': clone", "tm").toLowerCase();
        System.out.println(input);
        int THISMANYGAMES = 0;
        boolean SHOULDCLONE = input.contains("c");
        boolean USETESTWEIGHTS = input.contains("t");
        char[] in= input.toCharArray();
        for (int i = 0; i < in.length; i++) {
            if (Character.isDigit(in[i])) {
               THISMANYGAMES=Integer.parseInt(input.substring(i));
               break;
            }                        
        }
        System.out.println("shouldclone: " + SHOULDCLONE + " usetestweights: " + USETESTWEIGHTS);
        System.out.println(THISMANYGAMES);
        int[] someweights = (USETESTWEIGHTS) ? new int[]{0, 0, 0, 0, 0, 0, 0, 0} : new int[]{-320, -778, 4403, 324, 1316,3170,4743,4495}; //{-2,-11,-48,0,14,32,50,45};//{-3, -8, 43, 4, 14, 31, 47, 45};
        PaulGame pg = new PaulGame(someweights);
        TetrisWriter tw = new TetrisWriter();
        String Writehere = "C:\\Users\\Paul\\Desktop\\Results Here please\\";//Z:\\TetrisGames\\";
        String StartingLoc=Writehere;
        Writehere+= (USETESTWEIGHTS)? "TEST" : "";
        Writehere += (SHOULDCLONE) ? "UNITEDCloneScores" : "UNITEDExperiemtnalScores";
        String stamp=tw.GetTimeStamp(true, true, true, true, true, true);
        Writehere+=stamp;
        Writehere +=".txt";
        //tw.GetTimeStamp(true, true, true, true, true, true)
        boolean success = (SHOULDCLONE) ? PlayThisGameALotOfTimes(THISMANYGAMES, pg, Writehere)
                : PlayThisManySlightMutationsToOneGame(THISMANYGAMES, pg, Writehere);

        
        if (success) {
            tw.AppendToFile("I finished."+ tw.GetTimeStamp(true, true, true, true, true, true), StartingLoc+ "WorkersOutput"+ stamp+".txt");
        }
        //  PlayThisGameALotOfTimes(THISMANY, pg, output);
        System.out.println(success);
    }

    public static boolean PlayThisManySlightMutationsToOneGame(int thismany, PaulGame pg, String outputfile) {
        AIPlayer controller = new AIPlayer(pg, thismany);
        System.out.println("pg weights are:" + pg.GetStringWeights());
        controller.createNextGenBasedOn(pg);
        controller.GivePopulationLife(outputfile);
        return true;
    }

    private static boolean PlayThisGameALotOfTimes(int thismany, PaulGame pg, String outputfile) {
        AIPlayer controller = new AIPlayer(pg, thismany);
        controller.createNextGenOfClones(pg);
        controller.GivePopulationLife(outputfile);
        return true;
    }
}
